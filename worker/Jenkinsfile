pipeline {

  agent none

  stages{
      stage('build') {
        agent {
            label 'docker' // Use an agent with Docker installed
        }
        steps {
          script {
              // Pre-pull the image to avoid delays
              sh 'docker pull maven:3.9.8-sapmachine-21 || true'
              
              docker.image('maven:3.9.8-sapmachine-21').inside('-u root -v /tmp:/tmp') {
                  dir('worker') {
                      sh 'mvn -B clean compile'
                  }
              }
          }
        }
      }
      // when{
      //     changeset "**/worker/**"
      //   }

      // agent{
      //   docker{
      //     image 'maven:3.9.8-sapmachine-21'
      //     args '-v $HOME/.m2:/root/.m2'
      //   }
      // }

      // steps{
      //   echo 'Compiling worker app..'
      //   dir('worker'){
      //     sh 'mvn compile'
      //   }
      // }
      stage("test"){
        when{
          changeset "**/worker/**"
        }
        agent{
          docker{
            image 'maven:3.9.8-sapmachine-21'
            args '-v $HOME/.m2:/root/.m2'
          }
        }
        steps{
          echo 'Running Unit Tets on worker app..'
          dir('worker'){
            sh 'mvn clean test'
           }

          }
      }
      stage("package"){
        when{
          branch 'master'
          changeset "**/worker/**"
        }
        agent{
          docker{
            image 'maven:3.9.8-sapmachine-21'
            args '-v $HOME/.m2:/root/.m2'
          }
        }
        steps{
          echo 'Packaging worker app'
          dir('worker'){
            sh 'mvn package -DskipTests'
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
          }

        }
      }

      stage('docker-package'){
          agent any
          when{
            changeset "**/worker/**"
            branch 'master'
          }
          steps{
            echo 'Packaging worker app with docker'
            script{
              try {
                docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                    def workerImage = docker.build(
                      "jcampos15/worker:v${env.BUILD_ID}", "--no-cache ./worker"
                    )
                    workerImage.push()
                    workerImage.push("${env.BRANCH_NAME}")
                    workerImage.push("latest")
                }
              } catch (Exception e) {
                echo "‚ùå Docker build/push failed: ${e.getMessage()}"
                currentBuild.result = 'FAILURE'
              }
            }
          }
      }
  }

  post{
    always{
        echo 'Building multibranch pipeline for worker is completed..'
    }
  }
}
