pipeline {

  agent none

  stages{
    // Worker app
    stage("build"){
      agent{
        docker{
          image 'maven:3.9.8-sapmachine-21'
          args '-v $HOME/.m2:/root/.m2'
        }
      }
      when{
          changeset "**/worker/**"
      }
      steps{
        echo 'Compiling worker app..'
        dir(path: 'worker'){
          sh 'mvn compile'
        }
      }
    }

    stage("test"){
      agent{
        docker{
          image 'maven:3.9.8-sapmachine-21'
          args '-v $HOME/.m2:/root/.m2'
        }
      }
      when{
        changeset "**/worker/**"
      }
      steps{
        echo 'Running Unit Tets on worker app..'
        dir(path: 'worker'){
          sh 'mvn clean test'
        }
      }
    }

    stage('package') {
      agent {
        docker {
          image 'maven:3.9.8-sapmachine-21'
          args '-v $HOME/.m2:/root/.m2'
        }
      }
      when {
        branch 'master'
        changeset '**/worker/**'
      }
      steps {
        echo 'Packaging worker app'
        dir(path: 'worker') {
          sh 'mvn package -DskipTests'
          archiveArtifacts(artifacts: '**/target/*.jar', fingerprint: true)
        }
      }
    }

    stage('docker-package'){
      agent any
      when{
        changeset "**/worker/**"
        branch 'master'
      }
      steps{
        echo 'Packaging worker app with docker'
        script{
          try {
            docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
              def workerImage = docker.build(
                "jcampos15/worker:v${env.BUILD_ID}", "--no-cache ./worker"
              )
              workerImage.push()
              workerImage.push("${env.BRANCH_NAME}")
              workerImage.push("latest")
            }
          } catch (Exception e) {
            echo "‚ùå Docker build/push failed: ${e.getMessage()}"
            currentBuild.result = 'FAILURE'
          }
        }
      }
    }
  }

  post{
    always{
      echo 'Building multibranch pipeline for worker is completed..'
    }
  }
}
