pipeline {
  agent any
  
  stages{ 
    // Result app
    stage('build'){
      agent {
        docker {
          image 'node:22.4.0-alpine'
        }
      }
      when {
        changeset "**/result/**"
      }
      steps{ 
        echo 'Compiling result app' 
        dir(path: 'result'){ 
          sh 'npm install'
        } 
      } 
    }

    stage('test'){ 
      agent {
        docker {
          image 'node:22.4.0-alpine'
        }
      }
      when {
        changeset "**/result/**"
      }
      steps{ 
        echo 'running unit tests on result app' 
        dir(path: 'result'){ 
          sh 'npm install'
          sh 'npm test'
        } 
      } 
    }

    stage('docker-package') {
      agent any
      when {
        changeset '**/result/**'
        branch 'master'
      }
      steps {
        echo 'Packaging result app with docker'
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
            def resultImage = docker.build("jcampos15/result:v${env.BUILD_ID}", './result')
            resultImage.push()
            resultImage.push("${env.BRANCH_NAME}")
            resultImage.push('latest')
          }
        }
      }
    }
  } 
  post{ 
    always{ 
      echo 'Building multibranch pipeline for result (node.js) is completed..' 
    }
    failure{
      slackSend (channel: "#ci-cd", message: "Node.js Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
    success{
      slackSend (channel: "#ci-cd", message: "Node.js Build Success: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
    }
  }
}
